<!doctype html>
<meta charset="utf8">
<script src="ecmarkup.js"></script>
<link rel="stylesheet" href="ecmarkup.css">
<title>JSON modules</title>
<pre class=metadata>
  title: JSON modules
  status: proposal
  stage: 3
  location: https://github.com/tc39/proposal-json-modules
  copyright: false
  contributors: Sven Sauleau, Myles Borins, Daniel Ehrenberg, Daniel Clark
</pre>
<emu-intro id="intro">
  <h1>JSON modules</h1>
  <p>See <a href="https://github.com/tc39/proposal-json-modules/blob/master/README.md">the explainer</a> for information.</p>
</emu-intro>

<emu-clause id="sec-semantics">
  <h1>Semantics</h1>

  <emu-clause id="sec-hostresolveimportedmodule" aoid="HostResolveImportedModule">
    <h1>Runtime Semantics: HostResolveImportedModule ( _referencingScriptOrModule_, _moduleRequest_ )</h1>
    <emu-note>
      <p>The changes made to this abstract operation in this proposal build on the changes in the <a href="https://tc39.es/proposal-import-assertions/#sec-hostresolveimportedmodule">import assertions</a> proposal.  In order to distingush them, the changes unique to this proposal are labeled as insertions while the changes from import assertions are not labeled.</p>
    </emu-note>

    <p>HostResolveImportedModule is an implementation-defined abstract operation that provides the concrete Module Record subclass instance that corresponds to the ModuleRequest Record _moduleRequest_ occurring within the context of the script or module represented by the Script Record or Module Record _referencingScriptOrModule_. _referencingScriptOrModule_ may also be *null*, if the resolution is being performed in the context of an <emu-xref href="#sec-import-calls">`import()`</emu-xref> expression, and there is no active script or module at that time.</p>

    <emu-note>
      <p>An example of when _referencingScriptOrModule_ can be *null* is in a web browser host. There, if a user clicks on a control given by</p>

      <pre><code class="html">&lt;button type="button" onclick="import('./foo.mjs')"&gt;Click me&lt;/button&gt;</code></pre>

      <p>there will be no active script or module at the time the <emu-xref href="#sec-import-calls">`import()`</emu-xref> expression runs. More generally, this can happen in any situation where the host pushes execution contexts with *null* ScriptOrModule components onto the execution context stack.</p>
    </emu-note>

    <p>The implementation of HostResolveImportedModule must conform to the following requirements:</p>
    <ul>
      <li>
        The normal return value must be an instance of a concrete subclass of Module Record.
      </li>
      <li>
        If a Module Record corresponding to the pair _referencingScriptOrModule_, _moduleRequest_does not exist or cannot be created, an exception must be thrown.
      </li>
      <li>
        Each time this operation is called with a specific _referencingScriptOrModule_, _moduleRequest_.[[Specifier]], _moduleRequest_.[[Assertions]] triple as arguments it must return the same Module Record instance if it completes normally.
        <ul>
          <li>
            It is recommended but not required that when possible, implementations additionally conform to the following stronger constraint: each time this operation is called with a specific _referencingScriptOrModule_, _moduleRequest_.[[Specifier]] pair as arguments it must return the same Module Record instance if it completes normally.
          </li>
        </ul>
      </li>
      <li>
        _moduleRequest_.[[Assertions]] must not influence the interpretation of the module or the module specifier; instead, it may be used to determine whether the algorithm completes normally or with an abrupt completion.
      </li>
      <li>
        <ins>
          If _assertions_ has an entry _entry_ such that _entry_.[[Key]] is *"type"*, let _type_ be _entry_.[[Value]]. The following requirements apply:
          <ul>
            <li><ins>If _type_ is *"json"*, then this algorithm must either invoke ParseJSONModule and return the resulting Completion Record, or throw an exception.</ins></li>
          </ul>
        </ins>
      </li>
    </ul>
    <p>Multiple different _referencingScriptOrModule_, _moduleRequest_.[[Specifier]] pairs may map to the same Module Record instance. The actual mapping semantic is implementation-defined but typically a normalization process is applied to _specifier_ as part of the mapping process. A typical normalization process would include actions such as alphabetic case folding and expansion of relative and abbreviated path specifiers.</p>

    <emu-note type=editor>
      <p>The above text implies that is recommended but not required that hosts do not use _moduleRequest_.[[Assertions]] as part of the module cache key. In either case, an exception thrown from an import with a given assertion list does not rule out success of another import with the same specifier but a different assertion list.</p>
      <p>Assertions do not affect the contents of the module. Future follow-up proposals may relax this restriction with "evaluator attributes" that would change the contents of the module. There are three possible ways to handle multiple imports of the same module with "evaluator attributes":</p>
      <ul>
        <li><strong>Race</strong> and use the attribute that was requested by the first import. This seems broken--the second usage is ignored.</li>
        <li><strong>Reject</strong> the module graph and don't load if attributes differ. This seems bad for composition--using two unrelated packages together could break, if they load the same module with disagreeing attributes.</li>
        <li><strong>Clone</strong> and make two copies of the module, for the different ways it's transformed. In this case, the attributes would have to be part of the cache key. These semantics would run counter to the intuition that there is just one copy of a module.</li>
      </ul>
      <p>It's possible that one of these three options may make sense for a module load, on a case-by-case basis by attribute, but it's worth careful thought before making this choice.</p>
    </emu-note>


    <emu-note type=editor>
      <p><ins>The above text implies that hosts *must* support JSON modules imported with `type: "json"` (if it completes normally), but it doesn't prohibit hosts from supporting JSON modules imported with no type specified. Some environments (for example, web browsers) are expected to require `assert { type: "json" }`, and environments which want to restrict themselves to a compatible subset would do so as well.</ins></p>
    </emu-note>

    <emu-note type=editor>
      <p><ins>All of the import statements in the module graph that address the same JSON module will evaluate to the same mutable object.</ins></p>
    </emu-note>
  </emu-clause>

  <emu-clause id="sec-synthetic-module-records">
    <h1>Synthetic Module Records</h1>

    <emu-note type="editor">This Synthetic Module Records specification text comes from the <a href="https://github.com/tc39/proposal-javascript-standard-library/">JavaScript Standard Library proposal</a> and was written by Domenic Denicola. A version of this text exists <a href="https://heycam.github.io/webidl/#synthetic-module-records">in WebIDL</a>. A version of the text is copied here to clarify that the concept of Synthetic Module Records can proceed in standardization independently of the built-in modules effort.</emu-note>

    <p>A <dfn>Synthetic Module Record</dfn> is used to represent information about a module that is defined by specifications. Its exports are derived from a pair of lists, of string keys and of ECMAScript values. The set of exported names is static, and determined at creation time (as an argument to CreateSyntheticModule), while the set of exported values can be changed over time using SetSyntheticModuleExport. It has no imports or dependencies.</p>

    <emu-note>A Synthetic Module Record could be used for defining a variety of module types: for example, built-in modules, or JSON modules, or CSS modules.</emu-note>

    <p>In addition to the fields defined in <emu-xref href="#table-36"></emu-xref>, Synthetic Module Records have the additional fields listed in <emu-xref href="#table-synthetic-module-record-fields"></emu-xref>. Each of these fields is initially set in CreateSyntheticModule.</p>

    <emu-table id="table-synthetic-module-record-fields" caption="Additional Fields of Synthetic Module Records">
      <table>
        <thead>
          <th>Field Name
          <th>Value Type
          <th>Meaning
        </thead>
        <tbody>
          <tr>
            <td>[[ExportNames]]
            <td>List of String
            <td>A List of all names that are exported.
          </tr>
          <tr>
            <td>[[EvaluationSteps]]
            <td>An Abstract Closure
            <td>An Abstract Closure that will be performed upon evaluation of the module, taking the Synthetic Module Record as its sole argument. These will usually set up the exported values, by using SetSyntheticModuleExport. They must not modify [[ExportNames]]. They may return an abrupt completion.
          </tr>
        </tbody>
      </table>
    </emu-table>

    <emu-clause id="sec-createsyntheticmodule" aoid="CreateSyntheticModule">
      <h1>CreateSyntheticModule ( _exportNames_, _evaluationSteps_, _realm_, _hostDefined_ )</h1>

      <p>The abstract operation CreateSyntheticModule creates a Synthetic Module Record based upon the given exported names and evaluation steps. It performs the following steps:</p>

      <emu-alg>
        1. Return Synthetic Module Record { [[Realm]]: _realm_, [[Environment]]: *undefined*, [[Namespace]]: *undefined*, [[HostDefined]]: _hostDefined_, [[ExportNames]]: _exportNames_, [[EvaluationSteps]]: _evaluationSteps_ }.
      </emu-alg>

      <emu-note type="editor">It seems we could set up the environment either here or in Instantiate(). I've chosen to do so in Instantiate() for symmetry with Source Text Module Records, but I don't think there's any actual requirement in that regard.</emu-note>
    </emu-clause>

    <emu-clause id="sec-setsyntheticmoduleexport" aoid="SetSyntheticModuleExport">
      <h1>SetSyntheticModuleExport ( _module_, _exportName_, _exportValue_ )</h1>

      <p>The abstract operation SetSyntheticModuleExport can be used to set or change the exported value for a pre-established export of a Synthetic Module Record. It performs the following steps:</p>

      <emu-alg>
        1. Let _envRec_ be _module_.[[Environment]]'s EnvironmentRecord.
        1. Perform _envRec_.SetMutableBinding(_exportName_, _exportValue_, *true*).
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-smr-concrete-methods">
      <h1>Concrete Methods</h1>

      <p>The following are the concrete methods for Synthetic Module Record that implement the corresponding Module Record abstract methods.</p>

      <emu-note type="editor">I find having this wrapping sub-clause cleaner and suggest we do the same for Source Text Module Records in the main spec.</emu-note>

      <emu-clause id="sec-smr-getexportednames">
        <h1>GetExportedNames( _exportStarSet_ )</h1>

        <p>The GetExportedNames concrete method of a Synthetic Module Record implements the corresponding Module Record abstract method.</p>
        <p>It performs the following steps:</p>

        <emu-alg>
          1. Let _module_ be this Synthetic Module Record.
          1. Return _module_.[[ExportNames]].
        </emu-alg>
      </emu-clause>

      <emu-clause id="sec-smr-resolveexport">
        <h1>ResolveExport( _exportName_, _resolveSet_ )</h1>

        <p>The ResolveExport concrete method of a Synthetic Module Record implements the corresponding Module Record abstract method.</p>
        <p>It performs the following steps:</p>

        <emu-alg>
          1. Let _module_ be this Synthetic Module Record.
          1. If _module_.[[ExportNames]] does not contain _exportName_, return null.
          1. Return ResolvedBinding Record { [[Module]]: _module_, [[BindingName]]: _exportName_ }.
        </emu-alg>
      </emu-clause>

      <emu-clause id="sec-smr-instantiate">
        <h1>Instantiate ( )</h1>

        <p>The Instantiate concrete method of a Synthetic Module Record implements the corresponding Module Record abstract method.</p>
        <p>It performs the following steps:</p>

        <emu-alg>
          1. Let _module_ be this Synthetic Module Record.
          1. Let _realm_ be _module_.[[Realm]].
          1. Assert: _realm_ is not *undefined*.
          1. Let _env_ be NewModuleEnvironment(_realm_.[[GlobalEnv]]).
          1. Set _module_.[[Environment]] to _env_.
          1. Let _envRec_ be _env_'s EnvironmentRecord.
          1. For each _exportName_ in _module_.[[ExportNames]],
          1. Perform ! _envRec_.CreateMutableBinding(_exportName_, *false*).
          1. Perform ! _envRec_.InitializeBinding(_exportName_, *undefined*).
          1. Return *undefined*.
        </emu-alg>
      </emu-clause>

      <emu-clause id="sec-smr-Evaluate">
        <h1>Evaluate ( )</h1>

        <p>The Evaluate concrete method of a Synthetic Module Record implements the corresponding Module Record abstract method.</p>
        <p>It performs the following steps:</p>

        <emu-alg>
          1. Let _module_ be this Synthetic Module Record.
          1. Let _moduleCxt_ be a new ECMAScript code execution context.
          1. Set the Function of _moduleCxt_ to *null*.
          1. Assert: _module_.[[Realm]] is not *undefined*.
          1. Set the Realm of _moduleCxt_ to _module_.[[Realm]].
          1. Set the ScriptOrModule of _moduleCxt_ to _module_.
          1. Set the VariableEnvironment of _moduleCxt_ to _module_.[[Environment]].
          1. Set the LexicalEnvironment of _moduleCxt_ to _module_.[[Environment]].
          1. Suspend the currently running execution context.
          1. Push _moduleCxt_ on to the execution context stack; _moduleCxt_ is now the running execution context.
          1. Let _result_ be the result of performing ? _module_.[[EvaluationSteps]](_module_).
          1. Suspend _moduleCxt_ and remove it from the execution context stack.
          1. Resume the context that is now on the top of the execution context stack as the running execution context.
          1. Return Completion(_result_).
        </emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-create-default-export-synthetic-module" aoid="CreateDefaultExportSyntheticModule">
    <h1>CreateDefaultExportSyntheticModule ( _defaultExport_ )</h1>
    <p>The CreateDefaultExportSyntheticModule abstract operation creates a Synthetic Module Record whose default export is _defaultExport_. It performs the following steps:</p>
    <emu-alg>
      1. Return CreateSyntheticModule(&laquo; *"default"* &raquo;, the following steps, the current Realm, _defaultExport_) with the following steps given _module_ as an argument:</p>
        1. SetSyntheticModuleExport(_module_, *"default"*, _module_.[[HostDefined]]).</li>
    </emu-alg>
    <!-- TODO: Could we apply the new spec closure concept here rather than painstakingly passing _defaultExport_ through [[HostDefined]]? -->
  </emu-clause>

  <emu-clause id="sec-parse-json-module" aoid="ParseJSONModule">
    <h1>ParseJSONModule ( _source_ )</h1>
    <p>The abstract operation ParseJSONModule takes a single argument _source_ which is a String representing the contents of a module.</p>

    <emu-alg>
      1. Let _json_ be ? Call(%JSON.parse%, *undefined*, « _source_ »).  <!-- TODO: Refactor JSONParse into an abstract algorithm -->
      1. Return CreateDefaultExportSyntheticModule(_json_).
    </emu-alg>
  </emu-clause>
</emu-clause>
